import{Server as o}from"socket.io";import{readFileSync as e}from"fs";var s=(o=>(o.SERVER_CONNECTION="connection",o.CLIENT_CONNECTION="connect",o.DISCONNECTION="disconnect",o.UPLOAD_IMAGE="upload-image",o.UPLOAD_IMAGE_FAILURE="upload-image-failure",o.SERVER_SEND_IMAGE="server-send-image",o.PLUGIN_REGISTER="plugin-register",o.PLUGIN_REGISTER_SUCCESS="plugin-register-success",o.PLUGIN_REGISTER_FAILURE="plugin-register-failure",o.CLIENT_GET_ROOMS="client-get-plugins",o.CLIENT_OUT_ROOM="client-out-room",o))(s||{});class i{io;rooms;saveToImageFn;constructor(e,s){this.io=new o(e,{cors:{methods:["GET","POST"],credentials:!0}}),this.rooms=[],this.saveToImageFn=s.saveToImageFn,this.initSocket()}initSocket(){this.io.on(s.SERVER_CONNECTION,(async o=>{const e=o.handshake.query,{socketFrom:i}=e;if(console.log("server socket msg：",i),i){switch(i){case"device":this.initDeviceSocket(o);break;case"plugin":this.initPluginSocket(o)}o.on(s.DISCONNECTION,(()=>{this.logoutSocket({socketFrom:i,roomName:o.rooms[0],socketId:o.id}),console.log(`${i}: ${o.id} 已下线`)})),console.log(`${i}: ${o.id} 加入 server 成功`)}}))}logoutSocket(o){const{socketFrom:e,roomName:s,socketId:i}=o;"plugin"===e?(this.rooms.filter((o=>o!==s)),this.io.socketsLeave(s)):this.io.in(i).socketsLeave(s),this.io.emit("CLIENT_OUT_ROOM")}initDeviceSocket(o){o.emit(s.CLIENT_GET_ROOMS,this.rooms),o.on(s.UPLOAD_IMAGE,(async e=>{if(o.rooms.size<1)return console.log("找不到插件"),void o.emit(s.UPLOAD_IMAGE_FAILURE,{msg:"找不到插件！"});if(!this.saveToImageFn)return;const i=await this.saveToImageFn(e);i||o.emit(s.UPLOAD_IMAGE_FAILURE,{msg:"服务器出错了！"});const[t]=o.rooms[0];this.broadcastTransferImage(t,i)}))}initPluginSocket(o){o.on(s.PLUGIN_REGISTER,(e=>{this.checkExistRoom(e)?o.emit(s.PLUGIN_REGISTER_FAILURE,{msg:"名字已存在"}):(this.rooms.push(e),o.join(e),this.broadcastRoomsToClient(),o.emit(s.PLUGIN_REGISTER_SUCCESS,e))}))}checkExistRoom(o){return this.rooms.some((e=>e===o))}broadcastRoomsToClient(){try{this.io.emit(s.CLIENT_GET_ROOMS,this.rooms)}catch(o){console.error(o)}}broadcastTransferImage(o,i){const t=e(i);this.io.to(o).emit(s.SERVER_SEND_IMAGE,t)}}export{i as SocketServer};
